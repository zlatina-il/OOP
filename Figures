/*
Define abstract class Shape with only one abstract method CalculateSurface() and fields width and height. Define two new classes 
Triangle and Rectangle that implement the virtual method and return the surface of the figure (height*width for rectangle 
and height*width/2 for triangle). Define class Circle and suitable constructor so that at initialization height must be kept equal to 
width and implement the CalculateSurface() method. Write a program that tests the behavior of  the CalculateSurface() method for 
different shapes (Circle, Rectangle, Triangle) stored in an array.
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Figures
{
    public abstract class Shape
    {
        // fields
        private double height;
        private double width;

        // constructor
        public Shape(double width, double height)
        {
            this.width = width;
            this.height = height;
        }

        // properties
        public double Height
        {
            get { return this.height; }
            protected set
            {
                if (value < 0)
                {
                    throw new ArgumentException("Enter positive number for height");
                }
                this.height = value;
            }
        }

        public double Width
        {
            get { return this.width; }
            protected set
            {
                if (value < 0)
                {
                    throw new ArgumentException("Enter positive number for width");
                }
                this.width = value;
            }
        }

        // methods
        public abstract double CalculateSurface();
    }
    
    class Circle : Shape
    {
        // fields
        private double r;

        // constructors
        public Circle(double r)
            : base(2 * r, 2 * r)
        {
            this.r = r;
        }

        // methods
        public override double CalculateSurface()
        {
            return Math.PI * r * r;
        }
    }
    
    public class Rectangle : Shape
    {
        // constructor
        public Rectangle(double width, double height)
            : base(width, height) 
        { 
        }

        // methods
        public override double CalculateSurface()
        {
            return this.Height * this.Width;
        }
    }
    
    public class Triangle : Shape
    {
        // constructor
        public Triangle(double width, double height)
            : base(width, height) 
        { 
        }

        // methods
        public override double CalculateSurface()
        {
            return (this.Height * this.Width) / 2;
        }
    }
    
    class Program
    {
        static void Main()
        {
            Shape[] shapes = { 
                new Rectangle(2, 3),
                new Triangle(4, 5),
                new Circle(6),
                new Triangle(2.3, 3.5),
                new Rectangle(4.5, 5.2),
                new Circle(6.1)
            };

            foreach (Shape shape in shapes)
            {
                Console.WriteLine("{0} with width {1} and height {2} has a surface: {3}",
                    shape.GetType().Name, shape.Width, shape.Height, shape.CalculateSurface());
                Console.WriteLine("----------------------------------------------------------------------");
            }
        }
    }
    
}
